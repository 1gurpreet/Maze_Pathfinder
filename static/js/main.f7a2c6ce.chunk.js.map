{"version":3,"sources":["components/Button.tsx","components/Navbar.tsx","components/Carousel.tsx","ts/Cell.ts","ts/Stack.ts","ts/DFS.ts","ts/Queue.ts","ts/BFS.ts","ts/GS.ts","p5/wrapper.tsx","components/Board.tsx","ts/WallList.ts","ts/WeightedUnion.ts","ts/Maze.ts","ts/Graph.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","props","type","className","buttonType","data-toggle","dataToggle","onClick","onBuildMaze","onDFSTraversal","onBFSTraversal","onGSTraversal","onClear","text","Navbar","onReset","Carousel","id","data-ride","data-target","data-slide-to","data-interval","src","alt","href","role","data-slide","aria-hidden","React","Component","Cell","row","col","walls","visted","this","Stack","stack","Array","element","push","length","pop","i","DFS","g","s","e","marked","pred","p","vistedVertices","numOfVertices","dfs","v","adjList","forEach","path","x","size","get","cb","arr","j","Queue","items","isEmpty","shift","BFS","q","fill","bfs","enqueue","vertex","dequeue","GS","gs","adj","sort","a","b","P5Wrapper","canvas","wrapper","setSketch","newprops","sketch","ref","current","childNodes","removeChild","p5","onP5Changed","Board","Sketch","maze","grid","graph","N","w","buildDFSToggleOn","buildBFSToggleOn","buildGSToggleOn","buildToggleOn","gridWidthHeight","clearToggleOn","pfAlgorithm","resetToggle","state","index","bestPathIndex","currentElement","bestPathCurrentElement","pathArray","traversalPathArray","setup","rows","cols","console","log","clear","createCanvas","frameRate","Math","floor","width","height","cell","takeDownWallLeft","takeDownWallRight","setGraph","generateMaze","c1","c2","takeDownWallDown","takeDownWallUp","background","getGraph","getPath","num","getVistedVertices","resetGrid","draw","buildMazeFast","buttonClicked","getWalls","up","right","down","left","getRow","y","getCol","stroke","noFill","line","rect","strokeWeight","style","display","justifyContent","alignContent","WallList","WeightedUnion","parent","n","pcfind","root1","find","root2","Maze","list","numOfWalls","otherList","r","temp1","temp2","random","getC1","getC2","setWall","wunion","addEdge","Graph","V","E","otherAdj","App","handleClose","setState","showWelcomeModal","handleBuildMaze","makingList","randomizationList","handleDFSTraversal","setList","getList","handelBFSTraversal","handelGSTraversal","handelClear","handelReset","algorithmIndex","Fragment","Modal","show","onHide","aria-labelledby","Header","closeButton","Title","Body","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f7a2c6ce.chunk.js","sourcesContent":["import React from \"react\";\n\nexport interface ButtonProps {\n  text: string;\n  buttonType: string;\n  dataToggle?: string;\n  onBuildMaze?: () => void;\n  onDFSTraversal?: () => void;\n  onBFSTraversal?: () => void;\n  onGSTraversal?: () => void;\n  onClear?: () => void;\n}\n\nconst Button = (props: ButtonProps) => {\n  return (\n    <button\n      type=\"button\"\n      className={props.buttonType}\n      data-toggle={props.dataToggle}\n      onClick={\n        props.onBuildMaze ||\n        props.onDFSTraversal ||\n        props.onBFSTraversal ||\n        props.onGSTraversal ||\n        props.onClear\n      }\n    >\n      {props.text}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport Button from \"./Button\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"../css/navbar.css\";\n\nexport interface NavbarProps {\n  onBuildMaze: () => void;\n  onDFSTraversal: () => void;\n  onBFSTraversal: () => void;\n  onGSTraversal: () => void;\n  onClear: () => void;\n  onReset: () => void;\n}\n\nconst Navbar = (props: NavbarProps) => {\n  return (\n    <nav className=\"nav\">\n      <a className=\"nav-link\">Maze_Pathfinder</a>\n\n      <Button\n        text=\"Build Maze\"\n        buttonType={\"btn btn-link\"}\n        onBuildMaze={props.onBuildMaze}\n      />\n\n      <Button\n        text=\"Path Finding Algorithms\"\n        buttonType=\"btn btn-link dropdown-toggle\"\n        dataToggle=\"dropdown\"\n      />\n\n      <div className=\"dropdown-menu \">\n        <Button\n          text=\"DFS\"\n          buttonType={\"btn-link dropdown-item\"}\n          onDFSTraversal={props.onDFSTraversal}\n        />\n\n        <Button\n          text=\"BFS\"\n          buttonType={\"btn-link dropdown-item\"}\n          onBFSTraversal={props.onBFSTraversal}\n        />\n        <Button\n          text=\"GS\"\n          buttonType={\"btn-link dropdown-item\"}\n          onBFSTraversal={props.onGSTraversal}\n        />\n\n        <div className=\"dropdown-divider\"></div>\n\n        <Button\n          text=\"Clear\"\n          buttonType={\"btn-link dropdown-item\"}\n          onClear={props.onClear}\n        />\n      </div>\n\n      <Button\n        text=\"Reset\"\n        buttonType={\"btn btn-link\"}\n        onBuildMaze={props.onReset}\n      />\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nexport interface CarouselProps {}\n\nexport interface CarouselState {}\n\nclass Carousel extends React.Component<CarouselProps, CarouselState> {\n  render() {\n    return (\n      <div\n        id=\"carouselExampleControls\"\n        className=\"carousel slide\"\n        data-ride=\"carousel\"\n      >\n        <ol className=\"carousel-indicators\">\n          <li\n            data-target=\"#carouselExampleIndicators\"\n            data-slide-to=\"0\"\n            className=\"active\"\n          ></li>\n          <li data-target=\"#carouselExampleIndicators\" data-slide-to=\"1\"></li>\n          <li data-target=\"#carouselExampleIndicators\" data-slide-to=\"2\"></li>\n        </ol>\n        <div className=\"carousel-inner\">\n          <div className=\"carousel-item active\" data-interval=\"50000\">\n            <p className=\"text-center\">\n              This project demonstrates the construction and traversal of a\n              Maze.\n            </p>\n            <p className=\"font-weight-bold\">Step 1: Build the Maze</p>\n            <p className=\"\">\n              This step uses the randomized kruskal algorithm to knock down wall\n              between cells. This algorithm produces a fully connected graph,\n              meaning you can travel from any node to any other node. This step\n              builds a new maze everytime the button is pressed. The knocking\n              down of walls visualization is shown sequenually so it is easier\n              for the end user to know when the maze generation is done.\n            </p>\n\n            <img src=\"\" alt=\"\" />\n          </div>\n          <div className=\"carousel-item\" data-interval=\"100000\">\n            <p className=\"font-weight-bold\">\n              Step 2: Pick a Path Finding Algorithm\n            </p>\n\n            <p className=\"font-weight-bold text-center\">\n              Option 1: Depth First Search\n            </p>\n\n            <p className=\"text-center\">\n              Depth first Search is an algorithm for traversing graphs. The\n              algorithm explores as far as possible along each path before\n              backtracking to other paths.\n            </p>\n\n            <p className=\"font-weight-bold text-center\">\n              Option 2: Breath First Search\n            </p>\n\n            <p className=\"text-center\">\n              Breath First Search is an algorithm for traversing graphs. The\n              algorithm explores explores all of the neighbors of a node at the\n              the modes depth prior to moving on to the nodes at the next depth\n              level. This algorithm will give us the shortest path in our maze.\n            </p>\n\n            <p className=\"font-weight-bold text-center\">\n              Option 3: Gurpreet Search\n            </p>\n\n            <p className=\"text-center\">\n              This is a modified depth first search algorithm. The algorithm\n              explores as far as possible along each path and will always choose\n              the cells with the highest index before backtracking to other\n              paths. The cell at the end of the maze has the highest index.\n            </p>\n\n            <img src=\"\" alt=\"\" />\n          </div>\n        </div>\n        <a\n          className=\"carousel-control-prev\"\n          href=\"#carouselExampleControls\"\n          role=\"button\"\n          data-slide=\"prev\"\n        >\n          <span\n            className=\"carousel-control-prev-icon\"\n            aria-hidden=\"true\"\n          ></span>\n          <span className=\"sr-only\">Previous</span>\n        </a>\n        <a\n          className=\"carousel-control-next\"\n          href=\"#carouselExampleControls\"\n          role=\"button\"\n          data-slide=\"next\"\n        >\n          <span\n            className=\"carousel-control-next-icon\"\n            aria-hidden=\"true\"\n          ></span>\n          <span className=\"sr-only\">Next</span>\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","export class Cell {\n  private row: number;\n  private col: number;\n  private walls: Array<boolean>;\n  private visted: boolean;\n\n  public constructor(row: number, col: number) {\n    this.row = row;\n    this.col = col;\n    //           top,  right, bottom, left\n    this.walls = [true, true, true, true];\n    this.visted = false;\n  }\n\n  public setVisted(): void {\n    this.visted = true;\n  }\n\n  public takeDownWallUp(): void {\n    this.walls[0] = false;\n  }\n\n  public takeDownWallRight(): void {\n    this.walls[1] = false;\n  }\n\n  public takeDownWallDown(): void {\n    this.walls[2] = false;\n  }\n\n  public takeDownWallLeft(): void {\n    this.walls[3] = false;\n  }\n\n  public getWalls(): Array<boolean> {\n    return this.walls;\n  }\n\n  public getRow(): number {\n    return this.row;\n  }\n\n  public getCol(): number {\n    return this.col;\n  }\n\n  public getVisted(): boolean {\n    return this.visted;\n  }\n}\n","export class Stack {\n  private stack: Array<any>;\n  public constructor() {\n    this.stack = new Array<any>();\n  }\n\n  // push function\n  public push(element: any): void {\n    // push element into the items\n    this.stack.push(element);\n  }\n\n  // pop function\n  public pop() {\n    // return top most element in the stack\n    // and removes it from the stack\n    // Underflow if stack is empty\n    if (this.stack.length === 0) return \"Underflow\";\n    return this.stack.pop();\n  }\n\n  // peek function\n  public peek() {\n    // return the top most element from the stack\n    // but does'nt delete it.\n    return this.stack[this.stack.length - 1];\n  }\n\n  // get function\n  public get(i: number) {\n    return this.stack[i];\n  }\n\n  // isEmpty function\n  public isEmpty() {\n    // return true if stack is empty\n    return this.stack.length === 0;\n  }\n\n  public size() {\n    return this.stack.length;\n  }\n}\n","import { Graph } from \"./Graph\";\nimport { Stack } from \"./Stack\";\n\nexport class DFS {\n  private marked: Array<boolean>;\n  private pred: Array<number>;\n  private p: Array<number>;\n  private vistedVertices: Array<number>;\n  private e: number;\n\n  private s: number;\n\n  public constructor(g: Graph, s: number, e: number) {\n    this.s = s;\n    this.pred = new Array<number>(g.numOfVertices());\n    this.marked = new Array<boolean>(g.numOfVertices());\n    this.p = new Array<number>();\n    this.vistedVertices = new Array<number>();\n    this.e = e;\n    this.dfs(g, s);\n  }\n\n  public dfs(g: Graph, v: number): void {\n    this.marked[v] = true;\n    this.vistedVertices.push(v);\n    g.adjList(v).forEach((element: number) => {\n      if (!this.marked[element]) {\n        this.pred[element] = v;\n\n        this.dfs(g, element);\n      }\n    });\n  }\n\n  public path(v: number): Stack {\n    let path: Stack = new Stack();\n    for (let x = v; x !== this.s; x = this.pred[x]) {\n      path.push(x);\n    }\n    path.push(this.s);\n\n    for (let i = 0; i < path.size(); i++) {\n      this.p.push(path.get(i));\n    }\n    return path;\n  }\n\n  public getPath(cb: (num: number) => void): Array<number> {\n    const arr: Array<number> = new Array<number>();\n    let j = this.p.length - 1;\n    this.p.forEach((element) => {\n      arr.push(this.p[j--]);\n      //cb(this.p[j--]);\n    });\n\n    return arr;\n  }\n\n  public getVistedVertices(): Array<number> {\n    return this.vistedVertices;\n  }\n}\n","export class Queue {\n  private items: Array<any>;\n  public constructor() {\n    this.items = [];\n  }\n\n  public enqueue(element: any) {\n    this.items.push(element);\n  }\n\n  public dequeue() {\n    if (this.isEmpty()) return \"Underflow\";\n\n    return this.items.shift();\n  }\n\n  public isEmpty() {\n    return this.items.length === 0;\n  }\n\n  public length() {\n    return this.items.length;\n  }\n}\n","import { Graph } from \"./Graph\";\nimport { Queue } from \"./Queue\";\nimport { Stack } from \"./Stack\";\n\nexport class BFS {\n  private marked: Array<boolean>;\n  private pred: Array<number>;\n  private p: Array<number>;\n  private vistedVertices: Array<Array<number>>;\n  private q: Queue;\n  private e: number;\n  private s: number;\n\n  public constructor(g: Graph, s: number, e: number) {\n    this.s = s;\n    this.pred = new Array<number>(g.numOfVertices());\n    this.marked = new Array<boolean>(g.numOfVertices());\n    this.marked.fill(false);\n    this.p = new Array<number>();\n    this.vistedVertices = new Array<Array<number>>();\n    this.q = new Queue();\n    this.e = e;\n    this.bfs(g, s);\n  }\n\n  public bfs(g: Graph, v: number) {\n    this.q.enqueue(v);\n    this.marked[v] = true;\n\n    while (this.q.length() !== 0) {\n      const vertex = this.q.dequeue();\n\n      this.vistedVertices.push(g.adjList(vertex));\n      if (vertex === this.e) {\n        return;\n      }\n\n      g.adjList(vertex).forEach((element: number) => {\n        if (this.marked[element] !== true) {\n          this.marked[element] = true;\n          this.pred[element] = vertex;\n          //this.vistedVertices[vertex].push(this.pred[element]);\n          this.q.enqueue(element);\n        }\n      });\n    }\n  }\n\n  public path(v: number): Stack {\n    let path: Stack = new Stack();\n    for (let x = v; x !== this.s; x = this.pred[x]) {\n      path.push(x);\n    }\n    path.push(this.s);\n\n    for (let i = 0; i < path.size(); i++) {\n      this.p.push(path.get(i));\n    }\n\n    return path;\n  }\n\n  public getPath(cb: (num: number) => void): Array<number> {\n    const arr: Array<number> = new Array<number>();\n    let j = this.p.length - 1;\n    this.p.forEach((element) => {\n      arr.push(this.p[j--]);\n      //cb(this.p[j--]);\n    });\n\n    return arr;\n  }\n\n  public getVistedVertices(): Array<Array<number>> {\n    return this.vistedVertices;\n  }\n}\n","import { Graph } from \"./Graph\";\nimport { Stack } from \"./Stack\";\n\nexport class GS {\n  private marked: Array<boolean>;\n  private pred: Array<number>;\n  private p: Array<number>;\n  private vistedVertices: Array<number>;\n  private e: number;\n\n  private s: number;\n\n  public constructor(g: Graph, s: number, e: number) {\n    this.s = s;\n    this.pred = new Array<number>(g.numOfVertices());\n    this.marked = new Array<boolean>(g.numOfVertices());\n    this.p = new Array<number>();\n    this.vistedVertices = new Array<number>();\n    this.e = e;\n    this.gs(g, s);\n  }\n\n  public gs(g: Graph, v: number): void {\n    this.marked[v] = true;\n    this.vistedVertices.push(v);\n    let adj = [...g.adjList(v)];\n    adj.sort(function (a, b) {\n      return b - a;\n    });\n    adj.forEach((element: number) => {\n      if (!this.marked[element]) {\n        this.pred[element] = v;\n        this.gs(g, element);\n      }\n    });\n\n    /*\n    g.adjList(v).forEach((element: number) => {\n      if (!this.marked[element]) {\n        this.pred[element] = v;\n\n        this.gs(g, element);\n      }\n      \n    });\n    */\n  }\n\n  public path(v: number): Stack {\n    let path: Stack = new Stack();\n    for (let x = v; x !== this.s; x = this.pred[x]) {\n      path.push(x);\n    }\n    path.push(this.s);\n\n    for (let i = 0; i < path.size(); i++) {\n      this.p.push(path.get(i));\n    }\n    return path;\n  }\n\n  public getPath(cb: (num: number) => void): Array<number> {\n    const arr: Array<number> = new Array<number>();\n    let j = this.p.length - 1;\n    this.p.forEach((element) => {\n      arr.push(this.p[j--]);\n      //cb(this.p[j--]);\n    });\n\n    return arr;\n  }\n\n  public getVistedVertices(): Array<number> {\n    return this.vistedVertices;\n  }\n}\n","import p5 from \"p5\";\nimport * as React from \"react\";\nimport { Maze } from \"../ts/Maze\";\nimport { Cell } from \"../ts/Cell\";\n\nexport interface IProps {\n  sketch: (sketch: p5) => void;\n  onP5Changed?: (sketch: p5) => void;\n}\n\nexport default class P5Wrapper extends React.Component<IProps, {}> {\n  public canvas: any = null;\n  private wrapper: React.RefObject<HTMLDivElement> = React.createRef();\n\n  public componentDidMount() {\n    this.setSketch(this.props);\n  }\n\n  public componentWillReceiveProps(newprops: IProps) {\n    if (this.props.sketch !== newprops.sketch) {\n      this.setSketch(newprops);\n    }\n  }\n\n  public render() {\n    return <div ref={this.wrapper} />;\n  }\n\n  private setSketch(props: IProps) {\n    const current = this.wrapper.current;\n    if (current) {\n      if (current.childNodes[0]) {\n        current.removeChild(current.childNodes[0]);\n      }\n      this.canvas = new p5(props.sketch, current);\n      if (props.onP5Changed) {\n        props.onP5Changed(this.canvas);\n      }\n    }\n  }\n}\n","import React from \"react\";\nimport { Maze } from \"../ts/Maze\";\nimport { Cell } from \"../ts/Cell\";\nimport { Graph } from \"../ts/Graph\";\nimport { DFS } from \"../ts/DFS\";\nimport { BFS } from \"../ts/BFS\";\nimport { GS } from \"../ts/GS\";\n\nimport p5 from \"p5\";\n\nimport P5Wrapper from \"../p5/wrapper\";\n\nexport interface BoardProps {\n  maze: Maze;\n  graph: Graph;\n  grid: Array<Cell>;\n  buildToggleOn: boolean;\n  buildDFSToggleOn: boolean;\n  buildBFSToggleOn: boolean;\n  buildGSToggleOn: boolean;\n  clearToggleOn: boolean;\n  resetToggle: boolean;\n  index: number;\n  algorithmIndex: number;\n  pfAlgorithm: any;\n  N: number;\n  w: number;\n  gridWidthHeight: number;\n  path: Array<number>;\n}\n\nexport interface BoardState {\n  maze: Maze;\n  grid: Array<Cell>;\n  graph: Graph;\n  pfAlgorithm: any;\n}\n\nclass Board extends React.Component<BoardProps, BoardState> {\n  public constructor(props: BoardProps) {\n    super(props);\n    this.state = {\n      maze: this.props.maze,\n      grid: this.props.grid,\n      graph: this.props.graph,\n      pfAlgorithm: this.props.pfAlgorithm,\n    };\n  }\n\n  public Sketch = (props: BoardProps) => {\n    const {\n      maze,\n      grid,\n      graph,\n      N,\n      path,\n      w,\n      buildDFSToggleOn,\n      buildBFSToggleOn,\n      buildGSToggleOn,\n      buildToggleOn,\n      gridWidthHeight,\n      clearToggleOn,\n      resetToggle,\n    } = props;\n    let { pfAlgorithm } = this.state;\n    let pfAlgorithm2;\n\n    return (p: p5) => {\n      let index: number;\n      let algorithmIndex: number;\n      let bestPathIndex: number;\n      let currentElement: Cell;\n      let algorithmCurrentElement: number;\n      let bestPathCurrentElement: any;\n\n      let pathArray: Array<number>;\n      let traversalPathArray: Array<number>;\n      let dfs: DFS;\n\n      p.setup = () => {\n        while (grid.length > 0) {\n          grid.pop();\n        }\n\n        console.log(\"setup\");\n        p.clear();\n        p.createCanvas(gridWidthHeight, gridWidthHeight);\n        p.frameRate(180);\n\n        let rows: number, cols: number;\n\n        rows = Math.floor(p.width / w);\n        cols = Math.floor(p.height / w);\n\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            let cell = new Cell(j, i);\n            if (\n              i === 0 &&\n              j === 0 &&\n              (buildDFSToggleOn || buildDFSToggleOn || buildToggleOn)\n            ) {\n              // starting wall\n              cell.takeDownWallLeft();\n            }\n            if (\n              i === rows - 1 &&\n              j === cols - 1 &&\n              (buildDFSToggleOn || buildBFSToggleOn || buildToggleOn)\n            ) {\n              // ending wall\n              cell.takeDownWallRight();\n            }\n            grid.push(cell);\n          }\n        }\n\n        maze.setGraph(graph);\n        maze.generateMaze((c1: number, c2: number) => {\n          if (c1 + 1 === c2) {\n            //console.log(`${c1} is to the left of ${c2}`);\n            grid[c1].takeDownWallRight();\n            grid[c2].takeDownWallLeft();\n          } else {\n            //console.log(`${c1} is on top of ${c2}`);\n            grid[c1].takeDownWallDown();\n            grid[c2].takeDownWallUp();\n          }\n        });\n\n        p.background(255);\n        currentElement = grid[0];\n\n        index = 0;\n        algorithmIndex = 0;\n        bestPathIndex = 0;\n\n        //dfs = new DFS(maze.getGraph(), 0, this.props.N * this.props.N - 1);\n        if (buildDFSToggleOn || buildBFSToggleOn || buildGSToggleOn) {\n          if (buildDFSToggleOn) {\n            pfAlgorithm = new DFS(\n              maze.getGraph(),\n              0,\n              this.props.N * this.props.N - 1\n            );\n            pfAlgorithm.path(this.props.N * this.props.N - 1);\n            pathArray = pfAlgorithm.getPath((num: any) => {});\n            traversalPathArray = pfAlgorithm.getVistedVertices(\n              (num: any) => {}\n            );\n            algorithmCurrentElement = pathArray[0];\n            bestPathCurrentElement = traversalPathArray[0];\n          }\n          if (buildBFSToggleOn) {\n            pfAlgorithm = new BFS(\n              maze.getGraph(),\n              0,\n              this.props.N * this.props.N - 1\n            );\n\n            pfAlgorithm.path(this.props.N * this.props.N - 1);\n            pathArray = pfAlgorithm.getPath((num: any) => {});\n            traversalPathArray = pfAlgorithm.getVistedVertices(\n              (num: any) => {}\n            );\n\n            algorithmCurrentElement = pathArray[0];\n            bestPathCurrentElement = traversalPathArray[0];\n          }\n\n          if (buildGSToggleOn) {\n            pfAlgorithm = new GS(\n              maze.getGraph(),\n              0,\n              this.props.N * this.props.N - 1\n            );\n\n            pfAlgorithm.path(this.props.N * this.props.N - 1);\n            pathArray = pfAlgorithm.getPath((num: any) => {});\n            traversalPathArray = pfAlgorithm.getVistedVertices(\n              (num: any) => {}\n            );\n\n            algorithmCurrentElement = pathArray[0];\n            bestPathCurrentElement = traversalPathArray[0];\n          }\n        } else {\n          pathArray = new Array();\n          traversalPathArray = new Array();\n          algorithmCurrentElement = pathArray[0];\n          bestPathCurrentElement = traversalPathArray[0];\n        }\n\n        resetGrid();\n      };\n\n      p.draw = () => {\n        console.log(\"draw\");\n        if (clearToggleOn) {\n          buildMazeFast();\n        } else {\n          buttonClicked();\n        }\n      };\n\n      const buildMazeFast = () => {\n        grid.forEach((element: Cell) => {\n          const [up, right, down, left] = element.getWalls();\n          const x = element.getRow() * w;\n          const y = element.getCol() * w;\n          p.stroke(\"white\");\n          p.noFill();\n          if (!up) {\n            p.line(x, y, x + w, y);\n          }\n\n          if (!right) {\n            p.line(x + w, y, x + w, y + w);\n          }\n\n          if (!down) {\n            p.line(x + w, y + w, x, y + w);\n          }\n\n          if (!left) {\n            p.line(x, y + w, x, y);\n          }\n        });\n      };\n\n      const buttonClicked = () => {\n        if (buildDFSToggleOn) {\n          buildMazeFast();\n          getPath();\n        } else if (buildBFSToggleOn) {\n          buildMazeFast();\n          getPath();\n        } else if (buildGSToggleOn) {\n          buildMazeFast();\n          getPath();\n        } else {\n          if (index <= grid.length) {\n            let [up, right, down, left] = currentElement.getWalls();\n            let x = currentElement.getRow() * w;\n            let y = currentElement.getCol() * w;\n\n            p.stroke(\"white\");\n\n            if (!up) {\n              p.line(x, y, x + w, y);\n            }\n            if (!right) {\n              p.line(x + w, y, x + w, y + w);\n            }\n            if (!down) {\n              p.line(x + w, y + w, x, y + w);\n            }\n            if (!left) {\n              p.line(x, y + w, x, y);\n            }\n\n            currentElement = grid[index++];\n          } else {\n            getPath();\n          }\n        }\n      };\n\n      const getPath = () => {\n        if (\n          traversalPathArray.length !== 0 &&\n          bestPathIndex <= traversalPathArray.length\n        ) {\n          p.fill(\"#0080ff\");\n          let x: number;\n          let y: number;\n\n          if (buildBFSToggleOn) {\n            bestPathCurrentElement.forEach((element: number) => {\n              x = grid[element].getRow() * w;\n              y = grid[element].getCol() * w;\n              p.rect(x + 3, y + 3, w - 6, w - 6);\n            });\n          } else {\n            x = grid[bestPathCurrentElement].getRow() * w;\n            y = grid[bestPathCurrentElement].getCol() * w;\n            p.rect(x + 3, y + 3, w - 6, w - 6);\n          }\n\n          bestPathCurrentElement = traversalPathArray[bestPathIndex++];\n          if (bestPathCurrentElement === N * N - 1) {\n            bestPathIndex = traversalPathArray.length;\n          }\n        } else {\n          p.fill(\"#FCE519\");\n          let x: number;\n          let y: number;\n\n          pathArray.forEach((element: number) => {\n            x = grid[element].getRow() * w;\n            y = grid[element].getCol() * w;\n            p.rect(x + 3, y + 3, w - 6, w - 6);\n          });\n        }\n      };\n\n      const resetGrid = () => {\n        index = 0;\n        currentElement = grid[0];\n        grid.forEach((element: Cell) => {\n          const x = element.getRow() * w;\n          const y = element.getCol() * w;\n\n          p.stroke(0, 0, 0);\n          p.strokeWeight(3);\n          p.rect(x, y, w, w);\n        });\n      };\n    };\n  };\n\n  public render() {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignContent: \"center\",\n        }}\n      >\n        <P5Wrapper sketch={this.Sketch(this.props)} onP5Changed={() => {}} />\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","export class WallList {\n  private c1: number;\n  private c2: number;\n\n  constructor(c1: number, c2: number) {\n    //this.setWall(c1, c2);\n    this.c1 = c1;\n    this.c2 = c2;\n  }\n\n  setWall(c1: number, c2: number): void {\n    this.c1 = c1;\n    this.c2 = c2;\n  }\n\n  getC1(): number {\n    return this.c1;\n  }\n\n  getC2(): number {\n    return this.c2;\n  }\n\n  toString(): string {\n    return `( ${this.c1} , ${this.c2} )`;\n  }\n}\n","export class WeightedUnion {\n  private parent: Array<number>;\n\n  public constructor(N: number) {\n    this.parent = new Array(N);\n    this.parent.fill(-1);\n  }\n\n  public find(n: number): number {\n    let p: number;\n\n    while ((p = this.parent[n]) !== -1) {\n      n = p;\n    }\n\n    return n;\n  }\n\n  public pcfind(n: number): number {\n    if (this.parent[n] < 0) {\n      return n;\n    }\n\n    this.parent[n] = this.pcfind(this.parent[n]);\n\n    return this.parent[n];\n  }\n\n  public union(a: number, b: number): void {\n    let root1: number = this.find(a);\n    let root2: number = this.find(b);\n\n    if (root1 !== root2) {\n      this.parent[root2] = root1;\n    }\n  }\n\n  public wunion(a: number, b: number): void {\n    let root1: number = this.pcfind(a);\n    let root2: number = this.pcfind(b);\n\n    if (root1 !== root2) {\n      if (this.parent[root2] < this.parent[root1]) {\n        this.parent[root2] += this.parent[root1];\n        this.parent[root1] = root2;\n      } else {\n        this.parent[root1] += this.parent[root2];\n        this.parent[root2] = root1;\n      }\n    }\n  }\n\n  public connected(a: number, b: number): boolean {\n    return this.find(a) === this.find(b);\n  }\n\n  public printArray(): void {\n    this.parent.forEach((element) => console.log(element));\n  }\n\n  public getParentArray(): Array<number> {\n    return this.parent;\n  }\n}\n","import { Graph } from \"./Graph\";\nimport { WallList } from \"./WallList\";\nimport { WeightedUnion } from \"./WeightedUnion\";\n\nexport class Maze extends WeightedUnion {\n  private N: number;\n  private list: Array<WallList>;\n  private numOfWalls: number;\n  private graph: any;\n\n  public constructor(N: number) {\n    super(N * N);\n    this.N = N;\n    this.numOfWalls = N * (N - 1) * 2;\n    this.list = new Array<WallList>(this.numOfWalls);\n    this.graph = null;\n  }\n  public setGraph(g: Graph) {\n    this.graph = g;\n  }\n\n  public setList(otherList: Array<WallList>): void {\n    this.list = otherList;\n  }\n\n  public makingList(): void {\n    let c1: number = 0;\n    let c2: number = 0;\n    let i: number = 0;\n\n    for (c1 = 0; c1 < this.N * this.N - 1; c1++) {\n      c2 = c1 + 1;\n      if (c2 % this.N !== 0) {\n        this.list[i++] = new WallList(c1, c2);\n      }\n\n      c2 = c1 + this.N;\n      if (c2 < this.N * this.N) {\n        this.list[i++] = new WallList(c1, c2);\n      }\n    }\n  }\n\n  public randomizationList(): void {\n    let r: number;\n    let temp1, temp2: number;\n\n    for (let i = 0; i < this.numOfWalls; i++) {\n      r = Math.floor(Math.random() * this.numOfWalls);\n\n      temp1 = this.list[i].getC1();\n      temp2 = this.list[i].getC2();\n      this.list[i].setWall(this.list[r].getC1(), this.list[r].getC2());\n      this.list[r].setWall(temp1, temp2);\n    }\n  }\n\n  public generateMaze(cb: (c1: number, c2: number) => void): void {\n    for (let j = 0; j < this.numOfWalls; j++) {\n      if (\n        this.pcfind(this.list[j].getC1()) ===\n          this.pcfind(this.list[j].getC2()) &&\n        this.pcfind(this.list[j].getC1()) >= 0 &&\n        this.pcfind(this.list[j].getC2()) >= 0\n      ) {\n        //System.out.println(list[j].toString() + \" - Up\");\n        // Wall is Up\n      } else {\n        this.wunion(this.list[j].getC1(), this.list[j].getC2());\n        this.graph.addEdge(this.list[j].getC1(), this.list[j].getC2());\n        // console.log(`${this.list[j].getC1()}, ${this.list[j].getC2()} - Down`);\n\n        //System.out.println(list[j].toString() + \" - Down\");\n        // Wall is Down\n        cb(this.list[j].getC1(), this.list[j].getC2());\n      }\n    }\n  }\n\n  public getGraph(): Graph {\n    return this.graph;\n  }\n\n  public getList(): Array<WallList> {\n    return this.list;\n  }\n}\n","import { WeightedUnion } from \"./WeightedUnion\";\n\nexport class Graph extends WeightedUnion {\n  private V: number;\n  private E: number;\n  private adj: Array<Array<any>>;\n\n  public constructor(V: number) {\n    super(V * V);\n    this.V = V;\n    this.E = 0;\n    this.adj = new Array<Array<any>>(V);\n\n    for (let i = 0; i < this.adj.length; i++) {\n      this.adj[i] = new Array<number>();\n    }\n    // this.adj.fill(new Array<number>());\n  }\n\n  public addEdge(v: number, w: number): void {\n    this.adj[v].push(w);\n    this.adj[w].push(v);\n    this.E++;\n    //console.log(`${v} , ${w}`);\n    //console.log(this.adj[v]);\n  }\n\n  public setAdjList(otherAdj: Array<Array<number>>): void {\n    this.adj = otherAdj;\n  }\n\n  public adjList(v: number): Array<number> {\n    return this.adj[v];\n  }\n\n  public adj_(): Array<Array<number>> {\n    return this.adj;\n  }\n\n  public numOfVertices(): number {\n    return this.V;\n  }\n}\n","import React from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Carousel from \"./components/Carousel\";\nimport Board from \"./components/Board\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { Maze } from \"./ts/Maze\";\nimport { Graph } from \"./ts/Graph\";\nimport { Cell } from \"./ts/Cell\";\nimport { DFS } from \"./ts/DFS\";\nimport { BFS } from \".//ts/BFS\";\nimport { GS } from \"./ts/GS\";\n\nimport \"./css/App.css\";\n\nexport interface AppState {\n  showWelcomeModal: boolean;\n  maze: Maze;\n  grid: Array<Cell>;\n  graph: Graph;\n  buildToggleOn: boolean;\n  buildDFSToggleOn: boolean;\n  buildBFSToggleOn: boolean;\n  buildGSToggleOn: boolean;\n  clearToggleOn: boolean;\n  resetToggle: boolean;\n  index: number;\n  pfAlgorithm: any;\n  algorithmIndex: number;\n  path: Array<number>;\n}\n\nclass App extends React.Component<{}, AppState> {\n  private w: number;\n  private N: number;\n  private gridWidthHeight: number;\n\n  constructor(props: {}) {\n    super(props);\n    this.N = 30;\n    this.w = 20;\n    this.gridWidthHeight = this.N * this.w;\n    this.state = {\n      showWelcomeModal: true,\n      maze: new Maze(this.N),\n      grid: new Array<Cell>(),\n      graph: new Graph(this.N * this.N),\n      pfAlgorithm: null,\n      buildToggleOn: false,\n      buildDFSToggleOn: false,\n      buildBFSToggleOn: false,\n      buildGSToggleOn: false,\n      clearToggleOn: false,\n      resetToggle: false,\n      index: 0,\n      algorithmIndex: 0,\n      path: new Array<number>(),\n    };\n    this.state.maze.makingList();\n    this.state.maze.randomizationList();\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Modal\n          size=\"lg\"\n          show={this.state.showWelcomeModal}\n          onHide={this.handleClose}\n          aria-labelledby=\"example-modal-sizes-title-lg\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title id=\"example-modal-sizes-title-lg\">\n              Welcome to the Maze Visualizer!\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Carousel />\n          </Modal.Body>\n        </Modal>\n\n        <Navbar\n          onBuildMaze={this.handleBuildMaze}\n          onDFSTraversal={this.handleDFSTraversal}\n          onBFSTraversal={this.handelBFSTraversal}\n          onGSTraversal={this.handelGSTraversal}\n          onClear={this.handelClear}\n          onReset={this.handelReset}\n        />\n        <Board\n          maze={this.state.maze}\n          graph={this.state.graph}\n          grid={this.state.grid}\n          buildToggleOn={this.state.buildToggleOn}\n          buildDFSToggleOn={this.state.buildDFSToggleOn}\n          buildBFSToggleOn={this.state.buildBFSToggleOn}\n          buildGSToggleOn={this.state.buildGSToggleOn}\n          resetToggle={this.state.resetToggle}\n          clearToggleOn={this.state.clearToggleOn}\n          index={this.state.index}\n          algorithmIndex={this.state.algorithmIndex}\n          pfAlgorithm={this.state.pfAlgorithm}\n          N={this.N}\n          w={this.w}\n          gridWidthHeight={this.gridWidthHeight}\n          path={this.state.path}\n        />\n      </React.Fragment>\n    );\n  }\n\n  handleClose = () => this.setState({ showWelcomeModal: false });\n\n  handleBuildMaze = () => {\n    const buildToggleOn = true;\n    const buildDFSToggleOn = false;\n    const buildBFSToggleOn = false;\n    const buildGSToggleOn = false;\n    const clearToggleOn = false;\n\n    const maze = new Maze(this.N);\n    maze.makingList();\n    maze.randomizationList();\n    const index = 0;\n    const graph = new Graph(this.N * this.N);\n    const path = new Array();\n    this.setState({\n      buildToggleOn,\n      buildDFSToggleOn,\n      buildBFSToggleOn,\n      buildGSToggleOn,\n      clearToggleOn,\n      graph,\n      maze,\n      index,\n      path,\n    });\n  };\n\n  handleDFSTraversal = () => {\n    const buildDFSToggleOn = true;\n    const buildToggleOn = true;\n    const buildBFSToggleOn = false;\n    const buildGSToggleOn = false;\n    const clearToggleOn = false;\n\n    const maze = new Maze(this.N);\n    maze.setGraph(this.state.maze.getGraph());\n    maze.setList(this.state.maze.getList());\n    const index = 0;\n    const graph = new Graph(this.N * this.N);\n\n    const pfAlgorithm = new DFS(maze.getGraph(), 0, this.N * this.N - 1);\n\n    this.setState({\n      buildToggleOn,\n      buildDFSToggleOn,\n      buildBFSToggleOn,\n      buildGSToggleOn,\n      clearToggleOn,\n      maze,\n      graph,\n      index,\n      pfAlgorithm,\n    });\n  };\n\n  handelBFSTraversal = () => {\n    const buildDFSToggleOn = false;\n    const buildToggleOn = true;\n    const buildBFSToggleOn = true;\n    const buildGSToggleOn = false;\n\n    const clearToggleOn = false;\n\n    const maze = new Maze(this.N);\n    maze.setGraph(this.state.maze.getGraph());\n    maze.setList(this.state.maze.getList());\n    const index = 0;\n    const graph = new Graph(this.N * this.N);\n\n    const pfAlgorithm = new BFS(maze.getGraph(), 0, this.N * this.N - 1);\n\n    this.setState({\n      buildToggleOn,\n      buildDFSToggleOn,\n      buildBFSToggleOn,\n      buildGSToggleOn,\n      clearToggleOn,\n      maze,\n      graph,\n      index,\n      pfAlgorithm,\n    });\n  };\n\n  handelGSTraversal = () => {\n    const buildDFSToggleOn = false;\n    const buildToggleOn = true;\n    const buildBFSToggleOn = false;\n    const buildGSToggleOn = true;\n    const clearToggleOn = false;\n    const maze = new Maze(this.N);\n    maze.setGraph(this.state.maze.getGraph());\n    maze.setList(this.state.maze.getList());\n    const index = 0;\n    const graph = new Graph(this.N * this.N);\n    const pfAlgorithm = new GS(maze.getGraph(), 0, this.N * this.N - 1);\n\n    this.setState({\n      buildToggleOn,\n      buildDFSToggleOn,\n      buildBFSToggleOn,\n      buildGSToggleOn,\n      clearToggleOn,\n      maze,\n      graph,\n      index,\n      pfAlgorithm,\n    });\n  };\n\n  handelClear = () => {\n    const buildDFSToggleOn = false;\n    const buildToggleOn = true;\n    const buildBFSToggleOn = false;\n    const buildGSToggleOn = false;\n\n    const clearToggleOn = true;\n    const maze = new Maze(this.N);\n    maze.setGraph(this.state.maze.getGraph());\n    maze.setList(this.state.maze.getList());\n    const index = 0;\n    const graph = new Graph(this.N * this.N);\n\n    const pfAlgorithm = new BFS(maze.getGraph(), 0, this.N * this.N - 1);\n\n    this.setState({\n      buildToggleOn,\n      buildDFSToggleOn,\n      buildBFSToggleOn,\n      buildGSToggleOn,\n      clearToggleOn,\n      maze,\n      graph,\n      index,\n      pfAlgorithm,\n    });\n  };\n\n  handelReset = () => {\n    const resetToggle = true;\n    const buildDFSToggleOn = false;\n    const buildBFSToggleOn = false;\n    const buildGSToggleOn = false;\n    const buildToggleOn = false;\n\n    const index = 0;\n    this.setState({\n      buildToggleOn,\n      buildDFSToggleOn,\n      buildBFSToggleOn,\n      buildGSToggleOn,\n      resetToggle,\n      index,\n    });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}